library(raster); library(rgdal); library(sp)
viirs_2012 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201205_roadOnly5km.tif")
viirs_2012 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201205_roadOnly5km.tif")
viirs_2012[viirs_2012<=0] <- NA
cellStats(x=viirs_2012, stat='mean')
cellStats(x=viirs_2012, stat='range')
viirs_2016 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201612_roadOnly5km.tif")
viirs_2016[viirs_2016<=0] <- NA
cellStats(x=viirs_2016, stat='mean')
cellStats(x=viirs_2016, stat='range')
1.951707e+02
8.574920e-06
help(cellStats)
cellStats(x=viirs_2016, stat='summary')
viirs_2012[viirs_2016<=0] <- NA
cellStats(x=viirs_2012, stat='mean')
cellStats(x=viirs_2012, stat='range')
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
stats_2012
stats_2012
options(digits = 20)
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
stats_2012
options(scipen = 10)
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
stats_2012
options
options(digits=10)
stats_2012
options(scipen = 5)
stats_2012
options(scipen = 10)
stats_2012
options(scipen = 5)
library(raster); library(rgdal); library(sp)
viirs_2012 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201205_roadOnly5km.tif")
viirs_2012[viirs_2012<=0] <- NA
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
stats_2012
options(scipen = 10)
stats_2012
help(data.frame)
as.data.frame
help(as.data.frame)
df <- rbind(c("min", "mean", "sd", "max", "NA"),
stats_2012)
View(df)
options(scipen = 10)
library(raster); library(rgdal); library(sp)
viirs_2012 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201205_roadOnly5km.tif")
viirs_2012[viirs_2012<=0] <- NA
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
viirs_2016 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201612_roadOnly5km.tif")
viirs_2016[viirs_2016<=0] <- NA
stats_2016 <- c(cellStats(x=viirs_2016, stat = 'min'),
cellStats(x=viirs_2016, stat = 'mean'),
cellStats(x=viirs_2016, stat = 'sd'),
cellStats(x=viirs_2016, stat = 'max'),
cellStats(x=viirs_2016, stat = 'countNA'))
df <- rbind(c("min", "mean", "sd", "max", "NA"),
stats_2012,
stats_2016)
View(df)
hist(stats_2012)
hist(stats_2016)
hist(viirs_2012)
hist(viirs_2016)
hist(viirs_2012)
par(new=T)
hist(viirs_2016)
hist(viirs_2012)
hist(viirs_2016)
hist(viirs_2012, main="VIIRS NTL values, 05/2012")
hist(viirs_2012, main="VIIRS NTL values, 05/2012", xlab="NTL")
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed < 1] <- NA
library(dplyr)
viirs_2012_trimmed <- viirs_2012 %>% .[. < 1] <- NA
library(dplyr)
viirs_2012_trimmed <- viirs_2012 %>% .[. < 1] <- NA
viirs_2012_trimmed <- viirs_2012 %>%
.[. < 1] <- NA
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed < 1] <- NA
hist(viirs_2012_trimmed)
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed > 1] <- NA
hist(viirs_2012_trimmed)
viirs_2016_trimmed <- viirs_2016
viirs_2016_trimmed[viirs_2016_trimmed > 1] <- NA
hist(viirs_2016)
hist(viirs_2016_trimmed)
par(mfrow=c(2,2))
hist(viirs_2012, main="VIIRS NTL values, 05/2012", xlab="NTL")
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed > 1] <- NA
hist(viirs_2012_trimmed)
hist(viirs_2016)
viirs_2016_trimmed <- viirs_2016
viirs_2016_trimmed[viirs_2016_trimmed > 1] <- NA
hist(viirs_2016_trimmed)
par(mfrow=c(2,2))
hist(viirs_2012, main="VIIRS NTL values, 05/2012", xlab="NTL")
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed > 50] <- NA
hist(viirs_2012_trimmed)
hist(viirs_2016)
viirs_2016_trimmed <- viirs_2016
viirs_2016_trimmed[viirs_2016_trimmed > 50] <- NA
hist(viirs_2016_trimmed)
par(mfrow=c(2,2))
hist(viirs_2012, main="VIIRS NTL distribution, 05/2012", xlab="NTL")
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed > 1] <- NA
hist(viirs_2012_trimmed, main="VIIRS NTL distribution (<1 only), 05/2012", xlab="NTL (<1 only)")
hist(viirs_2016, main="VIIRS NTL distribution, 05/2012", xlab="NTL")
viirs_2016_trimmed <- viirs_2016
viirs_2016_trimmed[viirs_2016_trimmed > 1] <- NA
hist(viirs_2016_trimmed, main="VIIRS NTL distribution (<1 only), 05/2012", xlab="NTL (<1 only)")
par(mfrow=c(2,2))
hist(viirs_2012, main="VIIRS NTL distribution, 05/2012", xlab="NTL")
hist(viirs_2016, main="VIIRS NTL distribution, 05/2016", xlab="NTL")
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed > 1] <- NA
hist(viirs_2012_trimmed, main="VIIRS NTL distribution (<1 only), 05/2012", xlab="NTL (<1 only)")
viirs_2016_trimmed <- viirs_2016
viirs_2016_trimmed[viirs_2016_trimmed > 1] <- NA
hist(viirs_2016_trimmed, main="VIIRS NTL distribution (<1 only), 05/2016", xlab="NTL (<1 only)")
help(hist)
par(mfrow=c(2,2))
hist(viirs_2012, main="VIIRS NTL distribution, 05/2012", xlab="NTL")
hist(viirs_2016, main="VIIRS NTL distribution, 05/2016", xlab="NTL")
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed > 1] <- NA
hist(viirs_2012_trimmed, main="VIIRS NTL distribution (<1 only), 05/2012", xlab="NTL (<1 only)")
viirs_2016_trimmed <- viirs_2016
viirs_2016_trimmed[viirs_2016_trimmed > 1] <- NA
hist(viirs_2016_trimmed, main="VIIRS NTL distribution (<1 only), 05/2016", xlab="NTL (<1 only)")
par(mfrow=c(2,2))
hist(viirs_2012, main="VIIRS NTL distribution, 05/2012", xlab="NTL")
hist(viirs_2016, main="VIIRS NTL distribution, 12/2016", xlab="NTL")
viirs_2012_trimmed <- viirs_2012
viirs_2012_trimmed[viirs_2012_trimmed > 1] <- NA
hist(viirs_2012_trimmed, main="VIIRS NTL distribution (<1 only), 05/2012", xlab="NTL (<1 only)")
viirs_2016_trimmed <- viirs_2016
viirs_2016_trimmed[viirs_2016_trimmed > 1] <- NA
hist(viirs_2016_trimmed, main="VIIRS NTL distribution (<1 only), 12/2016", xlab="NTL (<1 only)")
library(stargazer)
write.table(df, file = "/Users/christianbaehr/Box Sync/afdb_sandbox/ntl_sum_stats.txt",
sep = ",", quote = FALSE, row.names = F)
View(df)
df <- as.data.frame(rbind(stats_2012, stats_2016))
names(df) <- c("min", "mean", "sd", "max", "NA")
write.table(df, file = "/Users/christianbaehr/Box Sync/afdb_sandbox/ntl_sum_stats.txt",
sep = ",", quote = FALSE, row.names = F)
write.table(df, file = "/Users/christianbaehr/Box Sync/afdb_sandbox/ntl_sum_stats.txt",
sep = ",", row.names = F)
library(raster); library(rgdal); library(sp)
viirs_2012 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201205_roadOnly5km.tif")
viirs_2012[viirs_2012<=0] <- NA
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
viirs_2016 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201612_roadOnly5km.tif")
viirs_2016[viirs_2016<=0] <- NA
stats_2016 <- c(cellStats(x=viirs_2016, stat = 'min'),
cellStats(x=viirs_2016, stat = 'mean'),
cellStats(x=viirs_2016, stat = 'sd'),
cellStats(x=viirs_2016, stat = 'max'),
cellStats(x=viirs_2016, stat = 'countNA'))
df <- rbind(c("min", "mean", "sd", "max", "NA"),
stats_2012,
stats_2016)
df <- as.data.frame(rbind(stats_2012, stats_2016))
names(df) <- c("min", "mean", "sd", "max", "NA")
write.table(df, file = "/Users/christianbaehr/Box Sync/afdb_sandbox/ntl_sum_stats.txt",
sep = ",", row.names = F)
options(scipen = 10)
options(scipen = 10)
library(raster); library(rgdal); library(sp)
viirs_2012 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201205_roadOnly5km.tif")
viirs_2012[viirs_2012<=0] <- NA
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
viirs_2016 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201612_roadOnly5km.tif")
viirs_2016[viirs_2016<=0] <- NA
stats_2016 <- c(cellStats(x=viirs_2016, stat = 'min'),
cellStats(x=viirs_2016, stat = 'mean'),
cellStats(x=viirs_2016, stat = 'sd'),
cellStats(x=viirs_2016, stat = 'max'),
cellStats(x=viirs_2016, stat = 'countNA'))
df <- rbind(c("min", "mean", "sd", "max", "NA"),
stats_2012,
stats_2016)
df <- as.data.frame(rbind(stats_2012, stats_2016))
names(df) <- c("min", "mean", "sd", "max", "NA")
write.csv(df, file = "/Users/christianbaehr/Box Sync/afdb_sandbox/ntl_sum_stats.txt")
write.csv(df, file = "/Users/christianbaehr/Box Sync/afdb_sandbox/ntl_sum_stats.csv")
options(scipen = 10)
library(raster); library(rgdal); library(sp)
viirs_2012 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201205_roadOnly5km.tif")
viirs_2012[viirs_2012<=0] <- NA
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
viirs_2016 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201612_roadOnly5km.tif")
viirs_2016[viirs_2016<=0] <- NA
stats_2016 <- c(cellStats(x=viirs_2016, stat = 'min'),
cellStats(x=viirs_2016, stat = 'mean'),
cellStats(x=viirs_2016, stat = 'sd'),
cellStats(x=viirs_2016, stat = 'max'),
cellStats(x=viirs_2016, stat = 'countNA'))
# df <- rbind(c("min", "mean", "sd", "max", "NA"),
#             stats_2012,
#             stats_2016)
df <- as.data.frame(rbind(stats_2012, stats_2016))
names(df) <- c("min", "mean", "sd", "max", "NA")
write.csv(df, file = "/Users/christianbaehr/Box Sync/afdb_sandbox/ntl_sum_stats.csv")
library(raster); library(rgdal); library(sp)
viirs_2012 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201205_roadOnly5km.tif")
viirs_2012[viirs_2012<=0] <- NA
stats_2012 <- c(cellStats(x=viirs_2012, stat = 'min'),
cellStats(x=viirs_2012, stat = 'mean'),
cellStats(x=viirs_2012, stat = 'sd'),
cellStats(x=viirs_2012, stat = 'max'),
cellStats(x=viirs_2012, stat = 'countNA'))
viirs_2016 <- raster("/Users/christianbaehr/Box Sync/afdb_sandbox/viirs_ken-eth_201612_roadOnly5km.tif")
viirs_2016[viirs_2016<=0] <- NA
stats_2016 <- c(cellStats(x=viirs_2016, stat = 'min'),
cellStats(x=viirs_2016, stat = 'mean'),
cellStats(x=viirs_2016, stat = 'sd'),
cellStats(x=viirs_2016, stat = 'max'),
cellStats(x=viirs_2016, stat = 'countNA'))
# df <- rbind(c("min", "mean", "sd", "max", "NA"),
#             stats_2012,
#             stats_2016)
df <- as.data.frame(rbind(stats_2012, stats_2016))
names(df) <- c("min", "mean", "sd", "max", "NA")
write.csv(df, file = "/Users/christianbaehr/Box Sync/afdb_sandbox/ntl_sum_stats.csv")
View(viirs_2012)
702*3145
View(df)
2158782/2207790
library(sf)
gps <- st_read("/Users/christianbaehr/Downloads/KE_2014_DHS_09122019_1317_126955/KEGE71FL/KEGE71FL.shp",
stringsAsFactors=F)
View(gps)
library(foreign)
sample <- read.dta("/Users/christianbaehr/Downloads/KE_2014_DHS_09122019_1317_126955/KEHR71DT/KEHR71DT.dta")
sample <- read.dta("/Users/christianbaehr/Downloads/KE_2014_DHS_09122019_1317_126955/KEHR71DT/KEHR71FL.dta")
View(sample[1:10,])
names(sample)
apply(sample[, 1:10], 2, function(x) {sum(x %in% gps)})
apply(sample[, 1:10], 2, function(x) {sum(x %in% gps$DHSCLUST)})
names(gps)
sum(sample$hv001 %in% gps$DHSCLUST)
sample$hv001[1:10]
unique(sample$hv001)[1:10]
View(gps)
View(sample[1:10,])
unique(sample$hv001)[1:10]
summary(sample$hv001)
summary(gps$DHSCLUST)
rep(c(1:5, 8:10), 4)
help(scp_upload)
library(ssh)
help(scp_upload)
help("ssh_connect")
help("system.file")
help("ssh_connect")
session <- ssh_connect(host="vvchoo@itpir-web-02.it.wm.edu")
help("scp_upload")
help(glm)
## lets use some built-in state-level data from 1977
data <- as.data.frame(state.x77, stringsAsFactors = F)
View(data)
class(data)
x <- 1
test <- ifelse(x==1,
mtcars,
iris)
View(test)
View(test)
test[[1]]
test <- ifelse(x==1, mtcars, iris)
View(test)
test2 <- unlist(test)
test[,1]
mtcars[,1]
##Creating S4 class Rasch
setClass("Rasch",
representation = representation(
name = "character",
a = "numeric",
y = "numeric"
),
prototype = prototype(
name = c(),
a = c(),
y = c()
)
)
##setting a validation so that the yvalue is always between zero and 1 and the length
##of a and y are the same
setValidity("Rasch", function(object) {
if (length(object@a) != length(object@y)) {
return("Objects a and y must be the same length")
}
for (i in c(1:length(object@y))) {
if (object@y[i] > 1 | object@y[i] < 0) {
return("Object y must be a vector containing only the numbers 0 and 1")
}
}
})
ainput <- sample(c(-3:3), 20, replace = T)
yinput <- sample(c(0:1), 20, replace = T)
test1 <- new("Rasch", name = "Christian", a = ainput, y = yinput)
ainput2 <- sample(c(-3:3), 4, replace = T)
yinput2 <- sample(c(0:1), 4, replace = T)
test2 <- new("Rasch", name = "Ramses", a = ainput2, y = yinput2)
##setting initialize method
setMethod("initialize", "Rasch",
function(.Object, ...){
value = callNextMethod()
return(value)
})
##setting generic for probability function
setGeneric("probability",
function(student = "Rasch", theta = "numeric") {
standardGeneric("probability")
})
##setting method for probability
setMethod("probability", signature = "Rasch",
function(student, theta) {
##P is probability right
P <- ((exp(theta-student@a))/(1+exp(theta-student@a)))
##Q is probability wrong
Q <- 1 - P
##Creating empty object
PorQ <- NA
##Creating two vectors, one with the probability right, and the other with the
##probabilty the individual answered how they did
for (i in c(1:length(theta))) {
if (student@y[i] == 1) {
PorQ[i] <- P[i]
}
if (student@y[i] == 0) {
PorQ[i] <- Q[i]
}
}
return(list(P=P, PorQ=PorQ))
})
thetavalue <- sample(c(-3:3), 20, replace = T)
probability(test1, thetavalue)
##Setting generic for likelihood
setGeneric("likelihood",
function(student = "Rasch", theta = "numeric") {
standardGeneric("likelihood")
})
setMethod("likelihood", signature = "Rasch",
function(student, theta) {
##P is the probability right
P <- ((exp(theta-student@a))/(1+exp(theta-student@a)))
##Q is probability wrong
Q <- 1 - P
##L is the likelihood of the proposed theta value
L <- prod((P^student@y)*(Q^(1-student@y)))
return(L)
})
likelihood(test1, thetavalue)
##setting generic for prior function
setGeneric("prior",
function(theta = "numeric") {
standardGeneric("prior")
})
####setting method for prior function
setMethod("prior", signature = "numeric",
##determining the height of the normal curve at the proposed theta
function(theta) {
height <- dnorm(theta, mean = 0, sd = 3)
return(height)
})
prior(1)
##setting eap generic
setGeneric("eap",
function(student = "Rasch", lower = "numeric", upper = "numeric") {
standardGeneric("eap")
})
##setting eap method
setMethod("eap", signature = "Rasch",
function(student, lower, upper) {
##Doing the portion inside the integral
function1 <- function(theta, student) {
sapply(theta, function(theta) likelihood(student, theta)*prior(theta))}
##finding the integral of function1
function2 <- function(student) {
integrate(function1, lower = -6, upper = 6, student)}
integral <- function2(student)
##returning the integral
return(integral)
})
eap(test1)
##setting generic function plotRasch
setGeneric("plotRasch",
function(student = "Rasch", addEAP = "logical") {
standardGeneric("plotRasch")
})
##creating method for plotRasch generic
setMethod("plotRasch", signature = "Rasch",
function(student, addEAP = F) {
##setting theta range
theta <- c(-3:3)
##Creating empty matrix
Pvalue <- matrix(data = NA, nrow = length(student@a), ncol = 7)
rownames(Pvalue) <- c(1:length(student@a))
legendnames <- paste("Question", rownames(Pvalue))
myColors <- rainbow(length(student@a))
##determining P for each theta value
for (i in c(1:length(student@a))) {
for (j in c(1:length(theta))) {
Pvalue[i, j] <- ((exp(theta[j]-student@a[i]))/(1+exp(theta[j]-student@a[i])))
}
}
##empty plot
plot(x = NULL, y = NULL, xlim = c(-3, +3), ylim = c(0, 1), main = paste(student@name, "Item Characteristic Curves"),
xlab = "Theta", ylab = "Probability")
##plotting the lines
for (i in c(1:length(student@a))) {
lines(x = theta, y = Pvalue[i,], col = myColors[i])
}
##creating a legend for the plot
legend("bottomright", legend = legendnames,
lty = rep(1, length(student@a)), col = myColors[c(1:length(student@a))], bty = "n")
##adding point for EAP if desired
if (addEAP == TRUE) {
points(0, eap(student = student)$value, type = "p")
}
})
plotRasch(test1)
plotRasch(test2, addEAP = T)
plotRasch(test1)
plotRasch(test2, addEAP = T)
mean_ndvi <- c(.7296,.7906,.7836,.7902,.7748,.7378,.7783,.7594,.7345,.7679,.6797,.7416,.7452,.7555,.7503,.7792,.7432,.7465,.5550)
mean_ndvi <- c(.7296,.7906,.7836,.7902,.7748,.7378,.7783,.7594,.7345,.7679,.6797,.7416,.7452,.7555,.7503,.7792,.7432,.7465,.5550)
saturation <- c(45623,105073,190929,281733,206182,326173,401510,56481,160844,512324,253242,89308,31566,409388,64358,72923,215081,173043,189993,9732)
mean_ndvi <- c(.7296,.7906,.7836,.7935,.7902,.7748,.7378,.7783,.7594,.7345,.7679,.6797,.7416,.7452,.7555,.7503,.7792,.7432,.7465,.5550)
saturation <- c(45623,105073,190929,281733,206182,326173,401510,56481,160844,512324,253242,89308,31566,409388,64358,72923,215081,173043,189993,9732)
cor(mean_ndvi, saturation)
plot(mean_ndvi, saturation)
test <- data.frame(mean_ndvi, saturation)
cor(mean_ndvi, saturation)
cor(test$mean_ndvi, test$saturation)
plot(mean_ndvi, saturation)
plot(test$mean_ndvi, test$saturation)
plot(test$mean_ndvi[-20,], test$saturation[,-20])
plot(test$mean_ndvi[-20,], test$saturation[-20,])
plot(test$mean_ndvi[-20], test$saturation[-20])
abline(lm(test$saturation~test$mean_ndvi))
plot(test$mean_ndvi, test$saturation)
abline(lm(test$saturation~test$mean_ndvi))
test2 <- test[-20,]
cor(test2$mean_ndvi, test2$saturation)
plot(test2$mean_ndvi, test2$saturation)
abline(lm(test2$saturation~tes2t$mean_ndvi))
abline(lm(test2$saturation~test2$mean_ndvi))
library(stringr)
library(rvest)
num_prod_pages=3
setwd("/Users/christianbaehr/Github/cpj_work")
i3=1
system('./phantomjs-2.1.1-macosx/bin/phantomjs readhtml.js') # return html of current page via PhantomJS
html_filename <- paste0(as.character(i3), '.html') # file generated in PhantomJS readhtml.js
web <- read_html(html_filename)
View(web)
content <- html_nodes(web, 'div.article-pricing') # %>% html_attr('href')
View(content)
content <- html_nodes(web, xpath="//table[1]") # %>% html_attr('href')
View(content)
content <- html_text(content) %>% as.data.frame()
View(content)
content <- html_nodes(web, xpath="//table[1]") # %>% html_attr('href')
content <- html_table(content) %>% as.data.frame()
View(content)
url_i3 <- capture.output(system("./phantomjs-2.1.1-macosx/bin/phantomjs nextpage.js", intern = TRUE))
url_i3
